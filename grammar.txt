UnaryOP : +
        | -
        | !
        ;

RelationOp : ==
           | !=
           | <=
           | >=
           | <
           | >
           ;

SumOp : +
      | -
      | || 
      ;

ProductOp : *
          | /
          | %
          | &&
          ;

SimpleType : int 
           | identifier
           ;

Type : SimpleType
     | Type []
     ;

VarDeclaration : Type identifier semi ; 

Name : this
     | identifier
     | Name . identifier
     | Name [Expression]
     ;
     
explist : Expression 
        | explist comma Expression
        ;
     
ArgList : empty
        | explist
        ;
     
expstar : empty
        | expstar Expression
        ;

brackstar : empty
          | brackstar []
          ;

NewExpression : new identifier ( ArgList )
              | new SimpleType expstar brackstar
              ;
              
Expression : Name
           | number
           | null
           | Name ()
           | read ()
           | NewExpression
           | UnaryOp Expression
           | Expression RelationOp Expression
           | Expression SumOp Expression
           | Expression ProductOp Expression
           | (Expression)
           ;

OptionalExpression : empty
                   | Expression
                   ;
              
LocalVarDeclaration : Type identifier semi ;

locvardecstar : empty
              | locvardecstar LocalVarDeclaration
              ;
              
statestar : empty
          | statestar Statement
          ;

Block : { locvardecstar statestar } ;

ConditionalStatement : if ( Expression ) Statement
                     | if ( Expression ) Statement else Statement
                     ;
              
Statement : ;
          | Name = Expression semi
          | Name ( ArgList ) semi
          | print ( ArgList ) semi
          | Conditional Statement
          | while ( Expression ) Statement 
          | return OptionalExpression semi
          | Block
          ;

Parameter : Type identifier ;

paramlist : Parameter
          | paramstar comma Parameter
          ;
          
ParameterList : empty
              | paramlist
              ;
              
ResultType : Type
           | void
           ;

MethodDeclaration : ResultType identifier ( ParameterList ) Block ;

ConstructorDeclaration : identifier ( ParameterList ) Block;

vardecstar : empty
           | vardecstar VarDeclaration
           ;
           
constdecstar : empty
             | constdecstar ConstructorDeclaration
             ;
             
methdecstar : empty
            | methdecstar MethodDeclaration
            ;

ClassBody : { vardecstar constdecstar methdecstar } ;

ClassDeclaration : class identifier ClassBody ;

Program : ClassDeclaration
        | Program ClassDeclaration
        ;